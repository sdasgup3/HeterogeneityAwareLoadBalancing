/**
 * \addtogroup CkLdb
*/
/*@{*/

#include "elements.h"
#include "ckheap.h"
#include "RefineLB.h"

CreateLBFunc_Def(RefineLB, "Move objects away from overloaded processor to reach average")

RefineLB::RefineLB(const CkLBOptions &opt): CentralLB(opt)
{
  lbname = (char *)"RefineLB";
  if (CkMyPe() == 0)
    CkPrintf("[%d] RefineLB created\n",CkMyPe());
}

void RefineLB::work(LDStats* stats)
{
  int obj;
  int n_pes   = stats->nprocs();
  int n_objs  = stats->n_objs;
  int* final_dist = new int[n_pes];
  int* init_dist  = new int[n_pes];
  double* objTime  = new double[n_pes];
  double* bgTime  = new double[n_pes];
  double* idleTime  = new double[n_pes];
  double* wall_times  = new double[n_pes];

  for(int pe = 0; pe < n_pes; pe++) {
    init_dist[pe] = 0 ;
    final_dist[pe] = 0 ;
  }
  
  int* from_procs = Refiner::AllocProcs(n_pes, stats);

  /******* Creating local from_proc which is a clone of the stats->from_proc*/
  for(obj=0;obj<stats->n_objs;obj++)  {
    int pe = stats->from_proc[obj];
    from_procs[obj] = pe;
  }

  // Get a new buffer to refine into
  int* to_procs = Refiner::AllocProcs(n_pes, stats);

  Refiner refiner(1.003);  // overload tolerance=1.05

  refiner.Refine(n_pes, stats, from_procs, to_procs);

  // Save output
  for(obj=0;obj<stats->n_objs;obj++) {
      int pe = stats->from_proc[obj];
      if (to_procs[obj] != pe) {
        if (_lb_args.debug()>=2)  {
	  CkPrintf("[%d] Obj %d migrating from %d to %d\n",
		 CkMyPe(),obj,pe,to_procs[obj]);
        }
	stats->to_proc[obj] = to_procs[obj];
      }
  }

   /***************CS 533**************************/
  for(int obj=0; obj < n_objs; obj++) {
    init_dist[stats->from_proc[obj]] ++;
    final_dist[stats->to_proc[obj]] ++;
  }
  for(int i=0;i< n_pes;i++){
    objTime[i]    = 0.0;
  }
  for(int obj = 0 ; obj<n_objs;obj++)  {
    objTime[stats->from_proc[obj]] +=  stats->objData[obj].wallTime;
  }

  for(int i=0;i< n_pes;i++){
    bgTime[i]     = (stats->procs[i]).bg_walltime;
    idleTime[i]   = (stats->procs[i]).idletime;
    wall_times[i] = (stats->procs[i]).total_walltime; //  - (stats->procs[i]).idletime;
  }

  for(int i=0;i< n_pes;i++){
    printf("procid %d (w:%lf bg:%lf obj:%lf i:%lf) :%d->%d\n",i,wall_times[i],bgTime[i], objTime[i], idleTime[i],init_dist[i],final_dist[i]);
  }


  /*****************************************/


  if (_lb_args.metaLbOn()) {
    stats->is_prev_lb_refine = 1;
    stats->after_lb_avg = refiner.computeAverageLoad();
    stats->after_lb_max = refiner.computeMax();

    if (_lb_args.debug() > 0)
      CkPrintf("RefineLB> Max load %lf Avg load %lf\n", stats->after_lb_max,
          stats->after_lb_avg);
  }

  // Free the refine buffers
  Refiner::FreeProcs(from_procs);
  Refiner::FreeProcs(to_procs);
}

#include "RefineLB.def.h"

/*@}*/
